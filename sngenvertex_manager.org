#+TITLE:  SNGenvertex Manager Configuration
#+AUTHOR: Xavier Garrido
#+DATE:   2013-10-20
#+OPTIONS: ^:{}

* Introduction
This file holds some vertex generators related to SuperNEMO detector geometry.

* Manager configuration
:PROPERTIES:
:TANGLE: sngenvertex_manager.conf
:END:

** Logging priority
#+BEGIN_SRC sh
  #@description Logging priority
  logging.priority : string = "warning"
#+END_SRC

** Vertices list of files
The following code defines the location of several vertices files. All of them
are defined in Section [[Vertex configuration]].
#+BEGIN_SRC sh
  #@description Names of the files configuring the list of registered vertex generators
  vg_list : string[4] as path =                                              \
    "@SNEMO_SIMULATION_CONFIGURATION@/scin_vg.lis"    \
    "@SNEMO_SIMULATION_CONFIGURATION@/tracker_vg.lis" \
    "@SNEMO_SIMULATION_CONFIGURATION@/source_vg.lis"  \
    "@SNEMO_SIMULATION_CONFIGURATION@/hall_vg.lis"
#+END_SRC

* Vertex configuration
This section defines several vertices configuration :
- [[Scintillator vertices][Scintillator vertices]]: to generate external events coming from calorimeter
  walls,
- [[Tracker vertices][Tracker vertices]]: to generate events from the internal drift chamber either on
  wires surface or inside gas tracking,
- [[Tracker vertices][Source vertices]]: to produce 2\beta events or to simulate source contamination.
- [[External vertices][External vertices]]: to generate events from outside the detector like neutrons

** Scintillator vertices
:PROPERTIES:
:TANGLE: scin_vg.lis
:END:

Insert preamble
#+BEGIN_SRC sh
  #@description A list of vertex generators
  #@key_label   "name"
  #@meta_label  "type"
#+END_SRC

- Generate vertex in the bulk volume of the wrapper for the main calorimeter's
  scintillator blocks:

  #+BEGIN_SRC sh
    [name="calo_wrapper_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the bulk of the main calorimeter wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    #origin : string = "category=calorimeter_wrapper module={*} side={1} column={0;1;2;4;19} row={0;1;2;12;13}"
    origin : string = "category='calorimeter_wrapper' module={*} side={*} column={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex in the bulk volume of the wrapper for the X-calorimeter's
  scintillator blocks:

  #+BEGIN_SRC sh
    [name="xcalo_wrapper_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the bulk of the X-wall calorimeter wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='xcalo_wrapper' module={*} side={*} column={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex in the bulk volume of the wrapper for the \gamma veto
  calorimeter's scintillator blocks:

  #+BEGIN_SRC sh
    [name="gveto_wrapper_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the bulk of the gamma veto wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='gveto_wrapper' module={*} side={*} wall={*} column={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex from the surface of the main calorimeter's scintillator blocks:

  #+BEGIN_SRC sh
    [name="calo_wrapper_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the main calorimeter wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='calorimeter_wrapper' module={*} side={*} column={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box top face activation
    mode.surface.top  : boolean = 1
  #+END_SRC

- Generate vertex from the surface of the X-calorimeter's scintillator blocks:

  #+BEGIN_SRC sh
    [name="xcalo_wrapper_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the X-wall calorimeter wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='xcalo_wrapper' module={*} side={*} column={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box top face activation
    mode.surface.top  : boolean = 1
  #+END_SRC

- Generate vertex from the surface of the \gamma veto's scintillator blocks:

  #+BEGIN_SRC sh
    [name="gveto_wrapper_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the gamma veto wrapper

    #@description Logging priority
    logging.priority : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='gveto_wrapper' module={*} side={*} wall={*} column={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box top face activation
    mode.surface.top  : boolean = 1
    #+END_SRC
** Tracker vertices
:PROPERTIES:
:TANGLE: tracker_vg.lis
:END:

Insert preamble
#+BEGIN_SRC sh
  #@description A list of vertex generators
  #@key_label   "name"
  #@meta_label  "type"
#+END_SRC

*** Vertices on tracker wires

- Generate vertex from the bulk volume of the anode wires:

  #+BEGIN_SRC sh
    [name="anode_wire_bulk" type="genvtx::cylinder_model_vg"]

    #@config Vertex generation from the bulk volume of the anode wires

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='drift_cell_anodic_wire' module={*} side={*} layer={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex on the surface of the anode wires:

  #+BEGIN_SRC sh
    [name="anode_wire_surface" type="genvtx::cylinder_model_vg"]

    #@config Vertex generation from the surface of the anode wires

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='drift_cell_anodic_wire' module={*} side={*} layer={*} row={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box side face activation
    mode.surface.side   : boolean = 1

    #@description Surface mode box bottom face activation
    mode.surface.bottom : boolean = 0

    #@description Surface mode box top face activation
    mode.surface.top    : boolean = 0
  #+END_SRC

- Generate vertex on the surface of the field wires:

  #+BEGIN_SRC sh
    [name="field_wire_surface" type="genvtx::cylinder_model_vg"]

    #@config Vertex generation from the surface of the field wires

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='drift_cell_field_wire' module={*} side={*} layer={*} row={*} set={*} wire={*}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box side face activation
    mode.surface.side   : boolean = 1

    #@description Surface mode box bottom face activation
    mode.surface.bottom : boolean = 0

    #@description Surface mode box top face activation
    mode.surface.top    : boolean = 0
  #+END_SRC

*** Vertices within tracker volumes (wires included)
**** Generator using category list
This vertex generator is quite classical in the way that it uses the category
file list and especially, the =drift_cell_core= category. This means that
vertices are going to be generated in the cell core, wires included, but not
inside the gap between foil and first tracker layer as well as not within the
gap between the main calorimeter walls and the last tracker layer. In order to
get a full coverage of tracker gaz, you may have a look to the

#+BEGIN_SRC sh :tangle no
  [name="tracker_drift_cell_bulk" type="genvtx::box_model_vg"]

  #@config Vertex generation from the core of Geiger cell

  #@description Logging priority
  logging.priority  : string = "warning"

  #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
  origin : string = "category='drift_cell_core' module={*} side={*} layer={*} row={*}"

  #@description Generation mode ("surface" or "bulk")
  mode   : string = "bulk"
#+END_SRC

**** Vertex generator using hardcoded geometry position
The following vertex generator defines a box which dimensions are hardcoded by
following the dimensions between source foil and calroimeter walls. This means
that any change in the geometry setup like an increase of source foil thickness
will need to update this box dimensions. Nevertheless, this vertex generator
allows to shoot events from the full tracker volumes so basically where tracker
gaz will remain.

To calculate the box size and the box placement, the following dimensions have
been used :
- tracker volume is a box of 405\times5008\times3030 mm,
- the source core model has a thickness of 58 mm,
- the source foil thickness is 167 µm.

#+BEGIN_SRC sh
  [name="tracker_volume_box" type="genvtx::box_vg"]

  #@config Vertex generation from the tracker gaz

  #@description Logging priority
  logging.priority  : string = "warning"

  #@description Generation mode ("surface" or "bulk")
  mode   : string = "bulk"

  #@description Box x size
  box.x : real as length =  433.9165 mm

  #@description Box y size
  box.y : real as length = 5008.0 mm

  #@description Box z size
  box.z : real as length = 3030.0 mm
#+END_SRC

Then we defines 2 placement : one for the front part ($x>0$) of the tracker and
another one for the back part ($x<0$).

#+BEGIN_SRC sh
  [name="tracker_front_volume_bulk" type="genvtx::placement_vg"]

  #@config Vertex generation from the front tracker volume

  #@description Logging priority
  logging.priority  : string = "warning"

  #@description Vertex generator name to place
  vertex_generator.name : string = "tracker_volume_box"

  #@description Placement along x-axis
  placement.x : real as length = 217.04175 mm

  #@description Placement along y-axis
  placement.y : real as length = 0.0 mm

  #@description Placement along z-axis
  placement.z : real as length = 0.0 mm
#+END_SRC

#+BEGIN_SRC sh
  [name="tracker_back_volume_bulk" type="genvtx::placement_vg"]

  #@config Vertex generation from the front tracker volume

  #@description Logging priority
  logging.priority  : string = "warning"

  #@description Vertex generator name to place
  vertex_generator.name : string = "tracker_volume_box"

  #@description Placement along x-axis
  placement.x : real as length = -217.04175 mm

  #@description Placement along y-axis
  placement.y : real as length = 0.0 mm

  #@description Placement along z-axis
  placement.z : real as length = 0.0 mm
#+END_SRC

We finally define a combined vertex generator in order to mix the two previous
vertex generators:
#+BEGIN_SRC sh
  [name="tracker_volume_bulk" type="genvtx::combined_vg"]

  #@config Vertex generation from the bulk volume of the tracker

  #@description Logging priority
  logging.priority  : string = "warning"

  #@description Geometry version requirement (not working with version lower than 2.0)
  geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

  #@description Vertex generator names
  generators : string[2]  = "tracker_front_volume_bulk" "tracker_back_volume_bulk"

  #@description Absolute weight of different generators
  generators.tracker_front_volume_bulk.absolute_weight : real = 1.0
  generators.tracker_back_volume_bulk.absolute_weight  : real = 1.0
#+END_SRC


** Source vertices
:PROPERTIES:
:TANGLE: source_vg.lis
:END:

Since there are two types of source strips namely "internal" and "external" with
different size and then different isotope mass, we first define independent
vertices for each of this model and then use a =genvtx::combined_vg= model to
combine with appropriate weights. These vertices are only available with
SuperNEMO geometry version greater than 2.0.

Insert preamble
#+BEGIN_SRC sh
  #@description A list of vertex generators
  #@key_label   "name"
  #@meta_label  "type"
#+END_SRC

*** Internal source strips
- Generate vertex from the bulk volume of the source foil:
  #+BEGIN_SRC sh
    [name="source_strips_internal_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the bulk volume of the inner source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='source_strip' module={*} strip=[1;34]"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex from the surface of the source foil:
  #+BEGIN_SRC sh
    [name="source_strips_internal_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the inner source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='source_strip' module={*} strip=[1;34]"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box back face activation
    mode.surface.back  : boolean = 1

    #@description Surface mode box front face activation
    mode.surface.front : boolean = 1
  #+END_SRC

*** External source strips

- Generate vertex from the bulk volume of the source foil:
  #+BEGIN_SRC sh
    [name="source_strips_external_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the bulk volume of the outer source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='source_strip' module={*} strip={0;35}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC

- Generate vertex from the surface of the source foil:
  #+BEGIN_SRC sh
    [name="source_strips_external_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the outer source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='source_strip' module={*} strip={0;35}"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box back face activation
    mode.surface.back  : boolean = 1

    #@description Surface mode box front face activation
    mode.surface.front : boolean = 1
  #+END_SRC

*** Combined vertex

- Generate vertex from both the bulk volume of all the source foils:
  #+BEGIN_SRC sh
    [name="source_strips_bulk" type="genvtx::combined_vg"]

    #@config Vertex generation from the bulk volume of the source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Vertex generator names
    generators : string[2]  = "source_strips_external_bulk" "source_strips_internal_bulk"

    #@description Absolute weight of different generators
    generators.source_strips_external_bulk.absolute_weight : real = 0.054
    generators.source_strips_internal_bulk.absolute_weight : real = 1.0
  #+END_SRC

- Generate vertex from the surface of all the source foils:
  #+BEGIN_SRC sh
    [name="source_strips_surface" type="genvtx::combined_vg"]

    #@config Vertex generation from the surface of the source strips

    #@description Logging priority
    logging.priority  : string = "warning"

    #@description Geometry version requirement (not working with version lower than 2.0)
    geometry.setup_requirement : string = "snemo::demonstrator(>=3)"

    #@description Vertex generator names
    generators : string[2] = \
      "source_strips_internal_surface" \
      "source_strips_external_surface"

    #@description Absolute weight of different generators
    generators.source_strips_external_surface.absolute_weight : real  = 0.054
    generators.source_strips_internal_surface.absolute_weight : real  = 1.0
  #+END_SRC
** External vertices
:PROPERTIES:
:TANGLE: hall_vg.lis
:END:

Insert preamble
#+BEGIN_SRC sh
  #@description A list of vertex generators
  #@key_label   "name"
  #@meta_label  "type"
#+END_SRC

- Generate vertex from the surface of the hall walls
  #+BEGIN_SRC sh
    [name="experimental_hall_surface" type="genvtx::box_model_vg"]

    #@config Vertex generation from the surface of the experimental hall

    #@description Logging priority
    logging.priority  : string = "notice"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='hall'"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "surface"

    #@description Surface mode box back face activation
    mode.surface.back   : boolean = 1

    #@description Surface mode box front face activation
    mode.surface.front  : boolean = 1

    #@description Surface mode box bottom face activation
    mode.surface.bottom : boolean = 1

    #@description Surface mode box top face activation
    mode.surface.top    : boolean = 1

    #@description Surface mode box left face activation
    mode.surface.left   : boolean = 1

    #@description Surface mode box right face activation
    mode.surface.right  : boolean = 1
  #+END_SRC

- Generate vertex from the volume of the hall
  #+BEGIN_SRC sh
    [name="experimental_hall_bulk" type="genvtx::box_model_vg"]

    #@config Vertex generation from the volume of the experimental hall

    #@description Logging priority
    logging.priority  : string = "notice"

    #@description Geometry origin of vertex in term of geometry category and addresses (geom ID)
    origin : string = "category='hall'"

    #@description Generation mode ("surface" or "bulk")
    mode   : string = "bulk"
  #+END_SRC
